BorderedMorph subclass: #MinesweeperCell	instanceVariableNames: 'state revealed mouseAction enabled flagged'	classVariableNames: 'colors'	package: 'Minesweeper'!!MinesweeperCell methodsFor: 'initialization' stamp: 'TubacVlad 11/29/2023 17:57'!initialize"Initializes the cell's state, revealing status"    super initialize.    state := '0'.    revealed := false.    enabled := true.    flagged := false.    self bounds: ((0@0) corner: (24@24)).    self color: Color lightGray.! !!MinesweeperCell methodsFor: 'initialization' stamp: 'TubacVlad 11/29/2023 17:59'!setMineNeighbors: numMines "Sets the number of neighboring mines for the cell."	state := numMines asString.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:59'!safeReveal"Reveals the cell if it's not a mine."	self isMine ifFalse: [ self reveal ].! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:45'!drawCentered: aString on: aCanvas color: aColor  | canvasWidth canvasHeight textMorph textWidth textHeight centerPosition |    textMorph := aString asMorph.  canvasWidth := self bounds width.  canvasHeight := self bounds height.  textWidth := textMorph bounds width.  textHeight := textMorph bounds height.    centerPosition := ((canvasWidth - textWidth) / 2) @ ((canvasHeight - textHeight) / 2).    aCanvas drawString: aString at: (centerPosition + self position) font: nil color: aColor.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:55'!cellType"Returns the current state of the cell"  ^ state.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:58'!reveal"Reveals the cell"	revealed ifTrue: [ ^ self ].	revealed := true.	mouseAction ifNotNil: [ mouseAction value ].	self color: self color darker.	self changed! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:55'!drawFlagOn: aCanvas"Draws a flag symbol ('F') on the cell's canvas."  self drawCentered: 'F' on: aCanvas.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/24/2023 12:00'!drawCentered: aString on: aCanvas  self drawCentered: aString on: aCanvas color: Color black.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:57'!makeMine	"Changes the cell's state to represent a mine."	state := #mine.! !!MinesweeperCell methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 17:59'!toggleFlag"Toggles the flagged status of the cell."	flagged := flagged not.	self changed.! !!MinesweeperCell methodsFor: 'drawing' stamp: 'TubacVlad 11/29/2023 17:56'!drawOn: aCanvas"This method handles the drawing of the cell on a canvas, displaying different representations based on the cell's state."    super drawOn: aCanvas.        revealed ifTrue: [        aCanvas fillRectangle: self bounds color: Color lightGreen.                (state = #mine) ifTrue: [            self drawCentered: 'x' on: aCanvas.        ] ifFalse: [            (state = '0') ifTrue: [                self drawCentered: '-' on: aCanvas color: Color black.            ] ifFalse: [                | numberColors |                numberColors := {Color red. Color blue. Color orange. Color magenta.                                 Color green. Color cyan. Color yellow. Color brown}.                (state asInteger between: 1 and: 8) ifTrue: [                    self drawCentered: state on: aCanvas color: (numberColors at: state asInteger).                ].            ].        ].    ] ifFalse: [        flagged ifTrue: [ self drawFlagOn: aCanvas ].    ].! !!MinesweeperCell methodsFor: 'event handling' stamp: 'TubacVlad 11/29/2023 17:58'!mouseUp: anEvent"Handles the logic when the mouse button is released on the cell."  anEvent redButtonChanged ifTrue: [    self reveal.  ].  anEvent yellowButtonChanged ifTrue: [	 self toggleFlag.  ].! !!MinesweeperCell methodsFor: 'event handling' stamp: 'TubacVlad 11/29/2023 17:56'!handlesMouseDown: anEvent"Determines if the cell handles a mouse-down event based on its enabled state."  ^ enabled.! !!MinesweeperCell methodsFor: 'accessing' stamp: 'TubacVlad 11/29/2023 17:59'!revealed"Returns whether the cell is revealed."	^ revealed! !!MinesweeperCell methodsFor: 'accessing' stamp: 'TubacVlad 11/24/2023 12:02'!mouseAction: aBlock  mouseAction := aBlock.! !!MinesweeperCell methodsFor: 'accessing' stamp: 'TubacVlad 11/29/2023 17:56'!flagged"Returns whether the cell is flagged."	^ flagged! !!MinesweeperCell methodsFor: 'protocol' stamp: 'TubacVlad 11/29/2023 17:55'!disable"Disables the cell by setting its enabled state to false."	enabled := false.! !!MinesweeperCell methodsFor: 'testing' stamp: 'TubacVlad 11/29/2023 17:57'!isMine"Checks if the cell represents a mine by comparing its state." ^ state = #mine.! !BorderedMorph subclass: #MinesweeperGame	instanceVariableNames: 'grid'	classVariableNames: ''	package: 'Minesweeper'!!MinesweeperGame methodsFor: 'initialization' stamp: 'TubacVlad 11/29/2023 18:12'!setDifficulty: difficulty "setDifficulty: configures the game difficulty level."   |size numMines|	self checkDifficulty: difficulty.	(#easy = difficulty) ifTrue: [ size := 9@9. numMines := 10. ].	(#medium = difficulty) ifTrue: [  size := 16@16. numMines := 40. ].	(#hard = difficulty) ifTrue: [ size := 30@16. numMines := 99. ].	   grid := self createGridOfSize: size withMines: numMines.   self setBoundsFrom: grid.! !!MinesweeperGame methodsFor: 'initialization' stamp: 'TubacVlad 11/29/2023 18:10'!setBoundsFrom: g "adjusts the  boundaries of the game based on the grid size."   |width height|   width := (g numberOfColumns) * (g at: 1 at: 1) bounds width.   height := (g numberOfRows) * (g at: 1 at: 1) bounds height.   self bounds: ((0@0) corner: (width@height)).! !!MinesweeperGame methodsFor: 'accessing' stamp: 'TubacVlad 11/29/2023 18:03'!createGameCellAt: i at: j"generates a new MinesweeperCell and positions it within the grid."	|cell x y|	   cell := MinesweeperCell new.   y := (i - 1) * cell bounds width.   x := (j - 1) * cell bounds height.   cell position: x@y.   self addMorph: cell.   ^ cell.! !!MinesweeperGame methodsFor: 'adding' stamp: 'TubacVlad 11/29/2023 18:01'!addMines: numMines to: g "method is responsible for placing mines randomly in the grid."	|indices|	   indices := (g indicesCollect: [ :i :j | {i. j.} ]) asArray.   indices := indices shuffle.   indices := indices atAll: (1 to: numMines).   indices do: [ :pair |	  |r c cell|	  r := pair at: 1.	  c := pair at: 2.		  cell := g at: r at: c.	  cell makeMine.	].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:06'!createGridOfSize: size withMines: numMines"constructs the game grid with cells and randomly places mines."   |g|	g := Array2D rows: (size y) columns: (size x) tabulate: [ :i :j |		self createGameCellAt: i at: j.   ].   self addMines: numMines to: g.   self calculateNeighborsFor: g.   self wireUpEventsFor: g.   ^ g.! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:08'!gameOver"gameOver ends the game and displays a ""Mina a explodat, jocul s-a terminat"" message."	|dialog|	self disableCells.	dialog := MessageDialogWindow new.	dialog text: 'Mina a explodat, jocul s-a terminat'.	dialog openInWorld.! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:09'!revealSafeNeigbhors: pt"reveals neighboring cells that are safe to reveal." 	|i j neighbors|	   i := pt x.   j := pt y.   neighbors := self neighborsIn: grid at: i at: j.   neighbors do: [ :coords |	  |i2 j2 n|		  i2 := coords at: 1.	  j2 := coords at: 2.	  n := grid at: i2 at: j2.	  n safeReveal.	].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:06'!disableCells"disableCells disables all cells in the grid."  grid do: [ :cell |	 cell disable.  ].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:08'!neighborsIn: g at: i at: j 	"identifies neighboring cells of a specific coordinate."	|offsets minRow maxRow minCol maxCol neighbors|		minRow := 1.	minCol := 1.	maxRow := g numberOfRows.	maxCol := g numberOfColumns.	neighbors := Set new.		   offsets := #(-1 0 1).   offsets do: [ :iOffset |	  offsets do: [ :jOffset |		|r c|		r := (i + iOffset) min: maxRow max: minRow.		c := (j + jOffset) min: maxCol max: minCol.		neighbors add: { r . c }.	  ].	].   neighbors remove: { i . j } ifAbsent: [].   ^ neighbors asArray.! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:15'!wireUpEventsFor: g "Assigns specific actions to each cell based on their type"	g indicesDo: [ :i :j |		|cell type action|				cell := g at: i at: j.		type := cell cellType.		action := [  self checkForVictory ].				(type = #mine) ifTrue: [			action := [ self gameOver ].		].	   (type = '0') ifTrue: [		  action := [ self revealSafeNeigbhors: i@j. self checkForVictory. ].		].		   cell mouseAction: action.	].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:03'!checkForVictory"checkForVictory checks if the game has been won."   |dialog|	self didIWin ifTrue: [ 		self disableCells.		dialog := MessageDialogWindow new.		dialog text: 'Felicitari ai castigat, ai gasit toate minele!!'.		dialog openInWorld.	].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:03'!calculateNeighborsFor: g "determines the number of neighboring mines for each non-mine cell."    g indicesDo: [ :i :j |        | numMines cell |                cell := g at: i at: j.        numMines := 0.        (cell isMine) ifFalse: [            ((i - 1) to: (i + 1)) do: [ :r |                ((j - 1) to: (j + 1)) do: [ :c |                    ((r > 0 and: [ r <= g numberOfRows ]) and: [ c > 0 and: [ c <= g numberOfColumns ]]) ifTrue: [                        (g at: r at: c) isMine ifTrue: [ numMines := numMines + 1 ].                    ].                ].            ].                        cell setMineNeighbors: numMines asString.        ].    ].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:03'!checkDifficulty: difficulty "verifies if the chosen difficulty level is valid."	(#(easy medium hard) includes: difficulty) ifFalse: [ self error: 'Unknown difficulty: ', difficulty. ].! !!MinesweeperGame methodsFor: 'as yet unclassified' stamp: 'TubacVlad 11/29/2023 18:06'!didIWin"didIWin determines if the game has been won by checking the states of the cells."	grid do: [ :cell |		cell isMine ifTrue: [			cell flagged ifFalse: [ ^ false ].		] ifFalse: [ 		   cell revealed ifFalse: [ ^ false ].		].	].   ^ true.! !!MinesweeperGame methodsFor: 'event handling' stamp: 'TubacVlad 11/24/2023 12:06'!handlesMouseDown: anEvent  ^ true.! !!MinesweeperGame methodsFor: 'opening' stamp: 'TubacVlad 11/29/2023 18:09'!openInWorld"Open the game in center of the World"    | worldCenter |    worldCenter := World bounds center.    self position: (worldCenter - (self bounds extent // 2)).    super openInWorld.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MinesweeperGame class	instanceVariableNames: ''!!MinesweeperGame class methodsFor: 'instance creation' stamp: 'TubacVlad 11/27/2023 01:09'!newAtDifficulty: difficulty"creează o nouă instanță a jocului cu un nivel de dificultate specificat."    | game |    game := self new.    game setDifficulty: difficulty.    ^ game! !